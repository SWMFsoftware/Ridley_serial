<commandList name="Ridley Ionosphere Model: IE Component">
!-- The syntax is described by share/Scripts/CheckParam.pl and the manual -->
<commandgroup name="Testing">

<command name="STRICT">
  <parameter name="UseStrict" type="logical" default="T"/>

#STRICT
T                       UseStrict

If true then stop when parameters are incompatible. If false, try to
correct parameters and continue. Default is true, i.e. strict mode.
</command>

<command name="DEBUG">
  <parameter name="iDebugLevel" type="integer" min="-1" default="-1"/>
  <parameter name="iDebugProc"  type="integer" min="0" max="$_nProc"
	     default="0"/>

#DEBUG
2			iDebugLevel
3			iDebugProc

The iDebugLevel variable sets the level of debug information
for the processor selected by iDebugProc.

Default is iDebugLevel=-1 which is no debug info on any and iDebugProc=0.
</command>

</commandgroup>

<commandgroup name="Input and Output">
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! OUTPUT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
<command name="RESTART">
  <parameter name="DoRestart" type="logical" default="F"/>

#RESTART
T			DoRestart

Read restart file if DoRestart is true. This is useful when the ionosphere
model runs in parallel with the other models in the SWMF (fast coupling).
Default is false.
</command>

<command name="IONODIR">
  <parameter name="NameIonoDir" type="string" length="100"
	     default="ionosphere"/>

#IONODIR
IE/Plots		NameIonoDir

The NameIonoDir variable contains the name of the directory to store
output files. Default value is "IE/ionosphere".

</command>

<command name="SAVEPLOT" alias="IE_SAVEPLOT">
  <parameter name="nPlotFile" type="integer" min="0" max="10"
             default="0" />
  <for from="1" to="$nPlotFile">
    <parameter name="StringPlot" type="strings" min="2" max="2">
      <part name="TypePlotForm" type="string" input="select"
	    required="T">
	<option name="IDL" value="idl" default="T"/>
	<option name="TecPlot" value="tec" />
      </part>
      <part name="TypePlotVar" type="string" input="select"
            required="T">
        <option name="Minimum" value="min"
		default="T"/>
	<option name="Maximum" value="max" />
	<option name="UA"      value="uam" />
        <option name="Aurora"  value="aur" />
      </part>
    </parameter>
    <parameter name="DnSavePlot" type="integer" min="-1" />
    <parameter name="DtSavePlot" type="real"    min="-1" />
  </for>

#SAVEPLOT
2			nPlotFile
min idl			StringPlot
-1			DnSavePlot
10.0			DtSavePlot [sec]
max tec			StringPlot
-1			DnSavePlot
20.0			DtSavePlot [sec]

The StringPlot variable consists of two string parts:
the TypePlotVar string can be 'min', 'max', 'uam' or 'aur'
corresponding to a minimum, maximum, upper atmosphere or auroral set of
plot variables. The other part TypePlotForm can be 'idl'
or 'tec' corresponding to plot files for IDL or TecPlot.
The DnSavePlot and DtSavePlot variables determine the frequency
of saves in terms of time step or physical time.

The default is that no plotfiles are saved.

The 'min' variable set includes:
  Theta [deg], Psi [deg], SigmaH [mhos], SigmaP [mhos], Jr [mA/$m^2$], Phi [kV]
The 'max' variable set includes:
  X [Re], Y [Re], Z [Re], Theta [deg], Psi [deg], SigmaH [mhos], SigmaP [mhos],
  E-Flux [W/$m^2$], Ave-E [eV], Jr [mA/$m^2$], Phi [kV], Ex [mV/m], Ey [mV/m], Ez [mV/m],
  Jx [microA/$m^2$], Jy [microA/$m^2$], Jz [microA/$m^2$], Ux [km/s], Uy [km/s], Uz [km/s],
  JouleHeat [mW/$m^2$], IonNumFlux [/$cm^2$/s],
  RT 1/B [1/T], RT Rho [amu/$cm^3$], RT P [Pa],
  conjugate dLat [deg], conjugate dLon [deg]
The 'uam' variable set includes:
  Theta [deg], Psi [deg], SigmaH [mho], SigmaP [mho], Jr [mA/$m^2$], Jr(NW) [mA/$m^2$],
  E-Flux [W/$m^2$], Ave-E [eV], Phi [kV]
The 'aur' variable set includes:
  Theta [deg], Psi [deg], SigmaH [mho], SigmaP [mho], Jr [mA/$m^2$], Phi [kV],
  E-Flux [W/$m^2$], Ave-E [eV], RT 1/B [1/T], RT Rho [amu/$cm^3$], RT P [Pa],
  JouleHeat [mW/$m^2$], IonNumFlux [/$cm^2$/s],
  conjugate dLat [deg], conjugate dLon [deg]
</command>

<command name="SAVEPLOTNAME">
  <parameter name="IsPlotName_e" type="logical" default="F" />
#SAVEPLOTNAME
F			IsPlotName_e

Plot files are named with the new substring including full year, ie. _e20000321-104510-000
</command>

<command name="SAVELOGNAME">
  <parameter name="IsLogName_e" type="logical" default="F" />
#SAVELOGNAME
F			IsLogName_e

Log files are named with the new substring including full year, ie. _e20000321-104500-000
</command>

<command name="SAVELOGFILE">
  <parameter name="DoSaveIELogfile" type="logical" default="F"/>

#SAVELOGFILE
F			DoSaveIELogfile

If true, every time that iono_solve is called, iteration, time, and solution
information is written to a logfile.
</command>

</commandgroup>

<commandgroup name="Physical parameters">
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!! Physical parameters !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
<command name="SOLAREUV">
  <parameter name="DoUseEuvCond" type="logical" default="T"/>
  <if expr="$DoUseEuvCond">
    <parameter name="F107Flux" type="real"    min="-1" />
  </if>

#SOLAREUV
T       DoUseEuvCond
-1.0    F107Flux

Turn on and configure the solar extreme ultraviolet (EUV) source of
ionospheric conductance. If DoUseEuvCond is set to True, the value for
F10.7 flux is read as well. Default values are shown above.

If F107Flux is set to a positive value, it sets the F10.7 solar radio flux
value (which controls dayside EUV-driven conductance) to a constant.

The time variation of the F10.7 flux can be taken into account by
interpolating it from a lookup table. If F107Flux is set to -1.0, then
the code is using a lookup table. This can be loaded explicitly in the
main part of the PARAM.in file, for example:

#LOOKUPTABLE
IE			      StringComp
F107			    NameTable
load			    NameCommand
MyF107.txt		NameFile
log			      TypeFile

If there is no table loaded and F107Flux is -1.0, then the code loads
the Param/f107.txt table automatically.
</command>

<command name="AURORA">
  <parameter name="DoUseAurora" type="logical" default="T"/>
  <if expr="$DoUseAurora">
    <parameter name="NameAuroraMod" type="string" input="select">
      <option name="Ridley Legacy Model vrs. 3" value="RLM3" />
      <option name="Ridley Legacy Model vrs. 3" value="RLM4" />
      <option name="Ridley Legacy Model vrs. 3" value="RLM5" />
      <option name="Cond. Model for Extreme Events" value="CMEE" />
    </parameter>
  </if>
#AURORA
T               DoUseAurora
RLM5            NameAurMod

Turn on or off auroral source of ionospheric conductance and select auroral
conductance model. Default values are shown.

Aurora precipitation includes diffuse, discrete, and wave-driven conductance
from both ion and electron precipitation. Not all auroral models include all
physical processes.

The following models are currently implemented:
\begin{itemize}
\item \textbf{RLM3}: The Ridley Legacy Model with a basic auroral oval
intensification factor.
\item \textbf{RLM4}: The Ridley Legacy Model, where FACs set conductance
empirically with an intensification along an oval fitted to upward FACs.
\item \textbf{RLM5}: Similar to RLM4 but with an advanced, narrower auroral
oval intensification pattern.
\item \textbf{CMEE}: The Conductance Model for Extreme Events - similar to
RLM5 but with an empirical fitting based on extreme events.
\end{itemize}

</command>

<command name="BACKGROUNDCOND">
  <parameter name="StarLightCond" type="real" min="0" default="0.25"/>
  <parameter name="PolarCapPedCond" type="real" min="0" default="0.25"/>
#BACKGROUNDCOND
0.25            StarLightPedCond
0.25            PolarCapPedCond

Set the background Pedersen conductance due to starlight and polar cap sources.
Units are Siemens.

Default values are shown.
</command>

<command name="UNIFORMCOND">
  <parameter name="SigmaPedConst" type="real" min="0" default="0"/>
  <parameter name="SigmaHalConst" type="real" min="0" default="0"/>
#UNIFORMCONDUCTANCE
5       SigmaPedConst
5       SigmaHalConst

Set a spatially uniform source of conductance across the entire hemisphere.
While not a physical source of conductance, this command is useful for
carefully controlled idealized numerical experiements.

Units are Siemens.

The default behavior is to set both SigmaPedConst and SigmaHalConst to zero.
</command>


<command name="IONOSPHERE">
  <parameter name="iConductanceModel" type="integer" input="select">
    <option value="0"  name="(0) constant Pedersen and 0 Hall"    />
    <option value="1"  name="(1) constant Pedersen and Hall"      />
    <option value="2"  name="(2) F107 flux and and constant Hall" />
    <option value="3"  name="(3) Simple oval"                     />
    <option value="4"  name="(4) Restricted oval"          	  />
    <option value="5"  name="(5) Realistic oval"      default="T" />
    <option value="8"  name="(8) MAGNIT"                          />
    <option value="9"  name="(9) Power law FAC-conductance"       />
    <option value="10" name="(10) PedConductance North-South"     />
    <option value="11" name="(11) Bob Robinson model"             />
  </parameter>
  <if expr="$iConductanceModel==10">
    <parameter name="PedConductance_North" type="real" />
    <parameter name="PedConductance_South" type="real" />
  </if>
  <parameter name="UseFullCurrent" type="logical" default="F"/>
  <parameter name="UseFakeRegion2" type="logical" default="F"/>
  <parameter name="F107Flux" type="real" min="-1" default="-1"/>
  <parameter name="StarLightPedConductance" type="real" min="0.001"
	     default="0.25"/>
  <parameter name="PolarCapPedConductance" type="real" min="0"
	     default="0.25"/>
#IONOSPHERE
5			iConductanceModel
F			UseFullCurrent
F			UseFakeRegion2
-1.0			F107Flux
0.25			StarLightPedConductance
0.25			PolarCapPedConductance

This command is LEGACY and only retained for backward compatability.
Users should review the new commands #AURORA, #SOLAREUV, #BACKGROUNDCOND, and
#UNIFORMCOND which set the sources of conductance in an unambiguous manner.

The iConductanceModel variable determines which ionosphere model is used:\\
  0 - uses a constant Pedersen conductance which is set by
      StarLightPedConductance\\
  1 - uses a constant Pedersen conductance which is set by
      StarLightPedConductance, and a constant Hall conductance
      which is set by PolarCapPedConductance\\
  2 - uses a solar EUV combined with a nightside conductance, so
      it uses F107Flux and StarLightPedConductance\\
  3 - uses solar EUV, nightside, and crude oval, so uses
      F107Flux, StarLightPedConductance, and PolarCapPedConductance,
      since a polar cap is defined with the oval.\\
  4 - restricted oval, uses same variables as 3.\\
  5 - more realistic oval, uses same variables as 3.\\
  8 - MAGNIT (requires #TRACEIE to be switched on in BATSRUS!!!)
  9 - Powerlaw (simple powerlaw dependence of conductance on FAC)
 10 - Pedersen conductance North-South
 11 - Bob Robinson model\\

Model 4 and 5 differ in the way the conductances are limited to the
fitted oval. Model 4 is more restrictive, while model 5 is somewhat
more relaxed.

The time variation of the F10.7 flux can be taken into account by
interpolating it from a lookup table. If F107Flux is set to -1.0, then
the code is using a lookup table. This can be loaded explicitly in the
main part of the PARAM.in file, for example

#LOOKUPTABLE
IE			StringComp
F107			NameTable
load			NameCommand
MyF107.txt		NameFile
log			TypeFile

If there is no table loaded and F107Flux is -1.0, then the code loads
the Param/f107.txt table automatically.

The UseFullCurrent and UseFakeRegion2 logicals were used in the past
to test various algorithmic choices. They should have a false value now.
The default values are shown by the example above.
</command>

<command name="IM">
  <parameter name="TypeImCouple" type="string" input="select">
    <option name="north"    default="T"/>
    <option name="south"               />
    <option name="cpcpmin"             />
    <option name="average"             />
  </parameter>
  <parameter name="FractionImJr" type="real" min="0" max="1" default="1"/>

#IM
average			TypeImCouple
0.5			FractionImJr

The TypeImCouple parameter determines which hemisphere the IM component
is coupled to. If the value is 'north' or 'south', the potential and radial
current are sent from the corresponding magnetic hemisphere. For 'cpcpmin'
the hemisphere with the lower cross polar cap potential is selected.
For TypeImCouple='average' the potential and radial current are averaged
for the north and south hemispheres.

The FractionImJr parameter multiplies the field aligned currents received from IM
(when the IM to IE coupling is swithed on)
so they do not shield completely the weaker GM field aligned currents.

The default values are 'north' and 1.0 (full strength IM currents),
which is backward compatible, and it requires no communication
between the IE processors.
</command>

<command name="UA">
  <parameter name="DoCoupleUaCurrent" type="logical" default="F"/>
  <parameter name="LatBoundary" type="real" min="0" max="60"
	     default="45" if="$DoCoupleUaCurrent" />

#UA
T		DoCoupleUaCurrent
45.0		LatBoundary [deg] (only read if DoCoupleUaCurrent is true)

The DoCoupleUaCurrent parameter determines if the field aligned current
calculated by the UA component should be used. Usually the currents are
dominated by the field aligned currents provided by the GM component.
The coupling with the UA currents is still experimental.
If DoCoupleUaCurrent is set to true, the lower latitude boundary for
the potential solver should be given with the LatBoundary paramter.

The default value is DoCoupleUaCurrent=.false, i.e. the UA currents
are not included.
</command>

<command name="AMIEFILES">
  <parameter name="AMIEFileNorth" type="string" length="100" />
  <parameter name="AMIEFileSouth" type="string" length="100" />

#AMIEFILES
IE/amie.north
IE/amie.south

Set the files to read the AMIE data from.

Default is not reading AMIE files.
</command>

<command name="SPS">
  <parameter name="UseSPS" type="logical" default="F"/>

#SPS
T			UseSPS

The UseSPS parameter indicates if the serial potential solver is used.
This is the default in the SWMF and it cannot be modified in the SWMF.
</command>

<command name="BACKGROUND" if="$_IsStandAlone">
  <parameter name="NameOfModelDir" type="string" length="100" />
  <parameter name="NameOfEFieldModel" type="string" length="100" />
  <parameter name="NameOfAuroralModel" type="string" length="100" />
  <parameter name="NameOfSolarModel" type="string" length="100" />

#BACKGROUND
dir			NameOfModelDir
weimer96		NameOfEFieldModel
ihp			NameOfAuroralModel
xyz			NameOfSolarModel

This command cannot be used in the SWMF.
</command>


<command name="CONDUCTANCEFILES">
  <parameter name="NameHalFile" type="string" default="cond_hal_coeffs.dat"
	     length="100"/>
  <parameter name="NamePedFile" type="string" default="cond_ped_coeffs.dat"
	     length="100"/>

#CONDUCTANCEFILES
cond_hal_coeffs.dat	NameHalFile
cond_ped_coeffs.dat	NamePedFile

Set the file names for the coefficients used in the empirical conductance
model.  Default values are shown for iConductanceModel set to 4 or 5
in the #IONOSPHERE command. For iConductanceModel=9 the defaults are
cond_hal_coeffs_power.dat and cond_ped_coeffs_power.dat. Any files read
with this command are expected to be placed into the IE folder of the
run directory. The defaults files are automatically copied from
IE/Ridley_serial/input/ directory.

The empirical conductance model estimates the auroral conductance between
latitudes 60 degs and 90 degs using an empirical function of the form
$\Sigma = \Sigma_0 - \Sigma_1e^{-\Sigma_2|J_{||}|}$, where the coefficients
$\Sigma_{0, 1, 2}$ are constants for different lat-MLT configurations. The
coefficient $\Sigma_1$, and occasionally $\Sigma_0$ are subsequently enhanced
by the auroral oval function. The degree and type of enhancement is dependent
on the kind of auroral oval/conductance model used (see #IONOSPHERE and/or
#AURORALOVAL commands for more information).

The default coefficient files are stored in IE/Ridley_serial/input; they are
copied to the run directory's IE folder automatically.  These files are
based off of curve fits between the Hall/Pedersen Conductance (in mho) at 110
km altitude and Upward/Downward Field Aligned Current (in $\mu A/m^2$) derived
from AMIE results for the month of Jan 1997 (refer Ridley et al, 2004 for more
info).

Files must be placed into the IE folder of the run directory.  They
are required to have a uniform MLT/lon grid.  Header information, such
as the number of points in both the latitude and magnetic local time
directions, must be included.  Points in MLT should not overlap
midnight (i.e., there should not be an entry for both 00 MLT and 24
MLT).

Examples of the required format can be found in Ridley_serial/input/.
</command>

<command name="USECMEEFIT">
  <parameter name="UseCMEEFitting" type="logical" default="F"/>
  <if expr="$UseCMEEFitting">
    <parameter name="LatNoConductanceSI"  type="real" default="45"/>
    <parameter name="FactorHallCMEE"      type="real" default="7.5"/>
    <parameter name="FactorPedCMEE"       type="real" default="5"/>
  </if>

#USECMEEFIT
T             UseCMEEFitting (rest of parameters read if true)
45            LatNoConductanceSI (default)
7.5           FactorHallCMEE (default)
5             FactorPedCMEE (default)

  This command allows modifications in the auroral oval properties and addition
  of a baseline conductance when using CMEE.  When the fitting option is true, a
  boundary condition at the boundary latitude (LatNoConductanceSI) is added to limit
  auroral conductance values equatorward of this boundary.  The baseline conductance,
  added to the oval adjusted conductance to avoid spikes in CPCP, has two values for
  Hall and Pedersen conductance. Default values are shown above.

  NOTE: If and when changing FactorHallCMEE and FactorPedCMEE from their default values,
  it is recommended that a higher value for both are chosen in order to avoid unrealistic
  potential values.

</command>

<command name="AURORALOVAL">
  <parameter name="UseOval" type="logical" default="T"/>
  <if expr="$UseOval">
    <parameter name="UseOvalShift"          type="logical" default="T"/>
    <parameter name="UseSubOvalConductance" type="logical" default="F"/>
    <parameter name="UseAdvancedOval"       type="logical" default="F"/>
    <parameter name="DoFitCircle"           type="logical" default="F"
	       if="$UseAdvancedOval"/>
  </if>

#AURORALOVAL
T             UseOval (rest of parameters read if true)
T             UseOvalShift
F             UseSubOvalConductance
F             UseAdvancedOval
T             DoFitCircle (read if UseAdvancedOval is true)

  This command controls the behavior of the auroral oval for conductance
  iModel=5.  If UseOval is set to True, an auroral oval is constructed from
  the upward FAC pattern and added to the other sources of ionospheric
  conductance.  UseOvalShift dictates whether or not the oval has a day-night
  positional shift.  If False, the oval will always be centered about the
  magnetic pole.  If True, the oval will be shifted daywards or nightwards
  to best fit the FAC pattern.  UseSubOvalConductance controls if conductance
  from FACs is restricted at latitudes below the auroral oval.  If True,
  conductance is not restricted at lower latitudes.  If False, conductance
  below auroral latitudes falls off exponentially, producing a sharp
  conductance gradient about the oval.  If UseAdvancedOval is set to True, an
  updated oval calculation is used.  The behavior of the new approach is
  controlled by DoFitCircle.  If true, a real circle is fit to the upward FACs
  via a minimization technique.  If false, an approach that is similar to the
  original is used, but leverages FAC information from all local times.  Both
  approaches result in an oval that more realistically reflects ionospheric
  dynamics and is less prone to position jumps as a function of time.

  Default values are shown above.

</command>

<command name="CONDUCTANCE">
  <parameter name="OvalWidthFactor"    type="real" min="0" default="1.0"/>
  <parameter name="OvalStrengthFactor" type="real" min="0" default="1.0"/>
  <parameter name="ConductanceFactor"  type="real" min="0" default="1.7"/>

#CONDUCTANCE
1.0			OvalWidthFactor
1.0                     OvalStrengthFactor
1.7                     ConductanceFactor

Modifies the conductance by adjusting the oval width/strength for conductance
models 4 and 5.  OvalWidthFactor scales the width of the auroral oval.
OvalStrengthFactor scales only the conductance applied to the auroral oval.
This parameter only acts when the conductance model is iModel 5.
ConductanceFactor scales the over all conductance from both FACs and the
aurora.

Default values are shown above.
</command>

<command name="BOUNDARY">
	<parameter name="LatBoundary" type="real" min="0" max="90" default="10"/>

#BOUNDARY
10.0			LatBoundary

Define the low latitude boundary for the potential solver. The default value is shown.
</command>

</commandgroup>

<commandgroup name="Scheme parameters">

<command name="SOLVER">
  <parameter name="NameSolver" type="string" input="select" case="lower">
    <option name="gmres"     		/>
    <option name="bicgstab"	default="T"	/>
  </parameter>
#SOLVER
bicgstab		NameSolver (gmres or bicgstab)

Select which solver to use. Default is bicgstab since it is faster.
</command>

<command name="KRYLOV">
  <parameter name="UsePreconditioner" type="logical" default="T"/>
  <parameter name="UseInitialGuess"   type="logical" default="T"/>
  <parameter name="Tolerance" type="real" min="0" default="0.01"/>
  <parameter name="MaxIteration" type="integer" min="1" default="100"/>

#KRYLOV
T			UsePreconditioner
T			UseInitialGuess
0.01			Tolerance
100			MaxIteration

This command controls the parameters for the Krylov solver used to
solve the Poisson type equation for the electric potential.
If UsePreconditioner is true the solver uses a preconditioner.
If UseInitialGuess is true, the previous solution is used as an
initial guess. The Tolerance parameter sets the second norm of
the final (preconditioned) residual. The MaxIteration parameter sets the
maximum number of iterations before the linear solver gives up.
In most cases the default values should work fine.

The default values are shown above.
</command>

</commandgroup>

</commandList>
